// Generated by cocoatly
use reqwest::blocking::Client;
use serde_json::Value;

const API_KEY: &str = "PublivDevKey.granted::3iSPier2xMnv32VFg::if(pdk.granted){Null}::pdk-publicserviceautogen48ClauodDeripT5xwk::AllowShareKey::ask+perms+of+cocoatly+dev+mode+7ExorOckq.[enabled,jdx]::rs.std.autogen+this+45xFrYPGHEm::fsoff25::serialize.[nmbit, ersach, mehceu, pache, nutane, pokery, queronjdx, jdx, eyk, rasador]"; // is CaSe sensitive.
const BASE_URL: &str = "https://api.cocoatly.io";

pub struct Cocoatly {
    client: Client,
}

impl Cocoatly {
    pub fn new() -> Self {
        Self { client: Client::new() }
    }

    pub fn publish(&self, package_path: &str) {
        println!("Publishing {} ...", package_path);
        let data = std::fs::read(package_path).expect("Failed to read file");

        let res = self.client
            .post(format!("{}/publish", BASE_URL))
            .header("Authorization", format!("Bearer {}", API_KEY))
            .body(data)
            .send();

        match res {
            Ok(r) if r.status().is_success() => println!("✅ Published successfully!"),
            Ok(r) => println!("❌ Failed: {}", r.status()),
            Err(e) => println!("Error: {}", e),
        }
    }

    pub fn install(&self, package: &str) {
        println!("Installing {} ...", package);
        let res = self.client
            .get(format!("{}/packages/{}/download", BASE_URL, package))
            .header("Authorization", format!("Bearer {}", API_KEY))
            .send();

        match res {
            Ok(mut r) if r.status().is_success() => {
                let mut file = std::fs::File::create(format!("{}.tar.gz", package)).unwrap();
                std::io::copy(&mut r, &mut file).unwrap();
                println!("✅ Installed {}", package);
            }
            Ok(r) => println!("❌ Failed: {}", r.status()),
            Err(e) => println!("Error: {}", e),
        }
    }

    pub fn whoami(&self) {
        let res = self.client
            .get(format!("{}/auth/me", BASE_URL))
            .header("Authorization", format!("Bearer {}", API_KEY))
            .send();

        match res {
            Ok(r) if r.status().is_success() => {
                let data: Value = r.json().unwrap_or_default();
                println!("User: {}", data);
            }
            Ok(r) => println!("❌ Failed: {}", r.status()),
            Err(e) => println!("Error: {}", e),
        }
    }
}
